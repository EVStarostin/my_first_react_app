{"version":3,"sources":["components/Counter/Counter.jsx","components/Header/Header.jsx","components/Pacman/Pacman.jsx","components/AviaSales/AviaSales.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","incrementCounter","setState","counter","state","setInterval","react_default","a","createElement","className","React","Component","Header","Counter_Counter_Counter","Pacman","AviaSales","handleClick","_this$state","flights","pricesIsOpen","length","getFlights","then","res","json","data","catch","error","url","concat","fetch","_this$state2","classes","push","join","onClick","map","flight","i","key","depart_date","origin","destination","value","App","Header_Header_Header","Pacman_Pacman_Pacman","AviaSales_AviaSales_AviaSales","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2a7583b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Counter.css';\r\n\r\nexport default class Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {counter: 0};\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(this.incrementCounter, 1000);\r\n    }\r\n    \r\n    incrementCounter = () => {\r\n        this.setState({counter: this.state.counter + 1});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"counter\">{this.state.counter} sec.</div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Counter from '../Counter/Counter';\r\nimport './Header.css';\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                You have been staing on this website for\r\n                <Counter />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Pacman.css';\r\n\r\nexport default class Pacman extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"pacman\">\r\n                <div className=\"pacman__figure\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './AviaSales.css';\r\n\r\nexport default class AviaSales extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {flights: [], error: null, pricesIsOpen: false};\r\n    }\r\n\r\n    getFlights() {\r\n        const token = '76d0c0460e16b3591eb5b390af2c7343';\r\n        const url = `https://api.travelpayouts.com/v2/prices/latest?currency=rub&period_type=year&page=1&limit=30&show_to_affiliates=true&sorting=price&token=${token}`;\r\n\r\n        return fetch(url);\r\n    }\r\n\r\n    handleClick = () => {\r\n        const { flights, pricesIsOpen } = this.state;\r\n\r\n        if (!pricesIsOpen && flights.length === 0) {\r\n            this.getFlights()\r\n                .then(res => res.json())\r\n                .then(res => this.setState({flights: res.data || [], pricesIsOpen: true}))\r\n                .catch(error => this.setState({error}))\r\n        } else {\r\n            this.setState({pricesIsOpen: !pricesIsOpen});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { flights, pricesIsOpen, error } = this.state;\r\n        let classes = ['avia-sales__prices'];\r\n        \r\n        pricesIsOpen && classes.push('avia-sales__prices--open');\r\n        classes = classes.join(' ');\r\n\r\n        if (error) {\r\n            return (\r\n                <div className=\"avia-sales__error\">\r\n                    При получении данных произошла ошибка\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"avia-sales\">\r\n                <button className=\"avia-sales__open\" onClick={this.handleClick}>\r\n                    {pricesIsOpen ? ' Скрыть ' : 'Показать '}\r\n                    самые дешевые авиабилеты\r\n                </button>\r\n                <ul className={classes}>\r\n                    {flights.map((flight, i) => (\r\n                        <li key={i} className=\"avia-sales__item\">\r\n                            <span className=\"avia-sales__depart-date\">{flight.depart_date}</span>\r\n                            <span> | </span>\r\n                            <span className=\"avia-sales__origin\">{flight.origin}</span>\r\n                            <span> - </span>\r\n                            <span className=\"avia-sales__destination\">{flight.destination}</span>\r\n                            <span> | </span>\r\n                            <span className=\"avia-sales__value\">{flight.value} руб.</span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from './components/Header/Header';\r\nimport Pacman from './components/Pacman/Pacman';\r\nimport AviaSales from './components/AviaSales/AviaSales';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Pacman />\r\n        <AviaSales />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}